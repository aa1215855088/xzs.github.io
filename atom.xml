<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>黄奕杰</title>
  <icon>https://www.gravatar.com/avatar/4e0e61fdf1b2bcfb4ee31da27601fe6b</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://huangyijie.com/"/>
  <updated>2020-01-18T16:44:35.511Z</updated>
  <id>https://huangyijie.com/</id>
  
  <author>
    <name>Henry Huang</name>
    <email>h1886@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>时间协议</title>
    <link href="https://huangyijie.com/2020/01/18/time-protocol/"/>
    <id>https://huangyijie.com/2020/01/18/time-protocol/</id>
    <published>2020-01-18T10:01:05.000Z</published>
    <updated>2020-01-18T16:44:35.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="时间协议"><a href="#时间协议" class="headerlink" title="时间协议"></a>时间协议</h1><p>前两天在看Netty的hello world的时候，里面举了个例子—创建时间协议服务器。通过学习，才知道这个协议很老的，甚至已经被网络时间替代了。但是这个协议很简单，所以学习一下也无碍。</p><h2 id="什么是时间协议"><a href="#什么是时间协议" class="headerlink" title="什么是时间协议"></a>什么是时间协议</h2><p>时间协议（英语：TIME protocol）是一个在RFC 868内定义的网络传输协议。它用作提供机器可读的日期时间信息。</p><p>这是时间协议（Time Protocol）在<a href="https://tools.ietf.org/html/rfc868" target="_blank" rel="noopener">RFC868</a>上的定义（中文由我自己翻译的）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">                             Time Protocol</span><br><span class="line">                                时间协议</span><br><span class="line"></span><br><span class="line">This RFC specifies a standard for the ARPA Internet community.  Hosts on</span><br><span class="line">the ARPA Internet that choose to implement a Time Protocol are expected</span><br><span class="line">to adopt and implement this standard.</span><br><span class="line">这个RFC的标准给ARPA（美国国防部国防高等研究计划署）英特网定义的。在ARPA英特网上，</span><br><span class="line">要实现时间协议的主机，则希望采用并且实现这个标准。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This protocol provides a site-independent, machine readable date and</span><br><span class="line">time.  The Time service sends back to the originating source the time in</span><br><span class="line">seconds since midnight on January first 1900.</span><br><span class="line">这个协议提供了一个独立的，机器可读的日期和时间。时间服务将回复给客户端一个从</span><br><span class="line">格林威治时间1900年1月1日开始计算，到请求时刻的总秒数。</span><br><span class="line"></span><br><span class="line">One motivation arises from the fact that not all systems have a</span><br><span class="line">date/time clock, and all are subject to occasional human or machine</span><br><span class="line">error.  The use of time-servers makes it possible to quickly confirm or</span><br><span class="line">correct a system&apos;s idea of the time, by making a brief poll of several</span><br><span class="line">independent sites on the network.</span><br><span class="line">现实中，并不是所有的系统都有时间功能，而且偶尔会受到人为的或者机器错误的影响。</span><br><span class="line">那么时间服务器就可以快速地提供正确的时间来让其他系统确认，或者用来纠正时间，</span><br><span class="line">只需要在网络上简单地查询就可以。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This protocol may be used either above the Transmission Control Protocol</span><br><span class="line">(TCP) or above the User Datagram Protocol (UDP).</span><br><span class="line">这个协议可以用在TCP和UDP协议上。</span><br><span class="line"></span><br><span class="line">When used via TCP the time service works as follows:</span><br><span class="line">当通过TCP协议使用时，时间服务器将执行以下步骤：</span><br><span class="line"></span><br><span class="line">   S: Listen on port 37 (45 octal).</span><br><span class="line">   服务端：监听37端口</span><br><span class="line"></span><br><span class="line">   U: Connect to port 37.</span><br><span class="line">   客户端：连接到37端口</span><br><span class="line"></span><br><span class="line">   S: Send the time as a 32 bit binary number.</span><br><span class="line">   服务端：发送32位二进制的时间</span><br><span class="line"></span><br><span class="line">   U: Receive the time.</span><br><span class="line">   客户端：接收到时间</span><br><span class="line"></span><br><span class="line">   U: Close the connection.</span><br><span class="line">   客户端：断开连接</span><br><span class="line"></span><br><span class="line">   S: Close the connection.</span><br><span class="line">   服务端：断开连接</span><br><span class="line"></span><br><span class="line">   The server listens for a connection on port 37.  When the connection</span><br><span class="line">   is established, the server returns a 32-bit time value and closes the</span><br><span class="line">   connection.  If the server is unable to determine the time at its</span><br><span class="line">   site, it should either refuse the connection or close it without</span><br><span class="line">   sending anything.</span><br><span class="line">   服务器监听端口37的连接。当连接建立，服务器将返回32位的时间值，然后关闭连接。</span><br><span class="line">   如果服务器无法确定时间，它需要拒绝连接，或者不发送任何信息，直接关闭连接。</span><br><span class="line"></span><br><span class="line">When used via UDP the time service works as follows:</span><br><span class="line">当通过UDP协议使用时，时间服务器将执行以下步骤：</span><br><span class="line"></span><br><span class="line">   S: Listen on port 37 (45 octal).</span><br><span class="line">   服务端：监听37端口</span><br><span class="line"></span><br><span class="line">   U: Send an empty datagram to port 37.</span><br><span class="line">   客户端：发送空数据报到37端口</span><br><span class="line"></span><br><span class="line">   S: Receive the empty datagram.</span><br><span class="line">   服务端：接受到空的数据报</span><br><span class="line"></span><br><span class="line">   S: Send a datagram containing the time as a 32 bit binary number.</span><br><span class="line">   服务端：发送32位二进制的时间的数据报</span><br><span class="line"></span><br><span class="line">   U: Receive the time datagram.</span><br><span class="line">   客户端：接收时间数据报</span><br><span class="line"></span><br><span class="line">   The server listens for a datagram on port 37.  When a datagram</span><br><span class="line">   arrives, the server returns a datagram containing the 32-bit time</span><br><span class="line">   value.  If the server is unable to determine the time at its site, it</span><br><span class="line">   should discard the arriving datagram and make no reply.</span><br><span class="line">   服务器用37端口监听数据报。当接收到数据报，服务器就返回包含32位二进制的时间的数据报。</span><br><span class="line">   如果服务器无法确定时间，则它应该丢弃接收到的数据报，不作回复。</span><br><span class="line"></span><br><span class="line">The Time</span><br><span class="line">时间</span><br><span class="line"></span><br><span class="line">The time is the number of seconds since 00:00 (midnight) 1 January 1900</span><br><span class="line">GMT, such that the time 1 is 12:00:01 am on 1 January 1900 GMT; this</span><br><span class="line">base will serve until the year 2036.</span><br><span class="line">这里的时间，时从格林威治时间1900年1月1日0点0分0秒开始计算，</span><br><span class="line">比如1就表示时格林威治时间1900年1月1日上午12点0分1秒；但是，这种计算方式到2036年将不再适用。</span><br><span class="line"></span><br><span class="line">For example:</span><br><span class="line">示例：</span><br><span class="line"></span><br><span class="line">   the time  2,208,988,800 corresponds to 00:00  1 Jan 1970 GMT,</span><br><span class="line"></span><br><span class="line">             2,398,291,200 corresponds to 00:00  1 Jan 1976 GMT,</span><br><span class="line"></span><br><span class="line">             2,524,521,600 corresponds to 00:00  1 Jan 1980 GMT,</span><br><span class="line"></span><br><span class="line">             2,629,584,000 corresponds to 00:00  1 May 1983 GMT,</span><br><span class="line"></span><br><span class="line">        and -1,297,728,000 corresponds to 00:00 17 Nov 1858 GMT.</span><br></pre></td></tr></table></figure><h2 id="时间协议服务器的Java实现"><a href="#时间协议服务器的Java实现" class="headerlink" title="时间协议服务器的Java实现"></a>时间协议服务器的Java实现</h2><p>完整代码在<a href="https://github.com/henryhuang/time-protocol-example" target="_blank" rel="noopener">https://github.com/henryhuang/time-protocol-example</a>。</p><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TPServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">37</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> OFF_SET = <span class="number">2208988800L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> TPServer().start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Server starting..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(PORT)) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                Socket connection = serverSocket.accept();</span><br><span class="line">                <span class="keyword">new</span> TPHandlerThread(connection);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">TPHandlerThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Socket connection;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">TPHandlerThread</span><span class="params">(Socket connection)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.connection = connection;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">this</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"Receive seek time request!"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> (DataOutputStream os = <span class="keyword">new</span> DataOutputStream(connection.getOutputStream())) &#123;</span><br><span class="line">                <span class="keyword">byte</span>[] timeBytes = String.valueOf(getTime()).getBytes();</span><br><span class="line">                os.writeInt(timeBytes.length);</span><br><span class="line">                os.write(timeBytes);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        connection.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis() / <span class="number">1000L</span> + OFF_SET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TPClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">37</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> OFF_SET = <span class="number">2208988800L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Long time = <span class="keyword">new</span> TPClient(<span class="string">"localhost"</span>).seekTime();</span><br><span class="line">        <span class="keyword">if</span> (time != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> Date((time - OFF_SET) * <span class="number">1000L</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TPClient</span><span class="params">(String host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">seekTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (Socket socket = <span class="keyword">new</span> Socket(<span class="keyword">this</span>.host, PORT);</span><br><span class="line">            DataInputStream is = <span class="keyword">new</span> DataInputStream(socket.getInputStream())) &#123;</span><br><span class="line">            <span class="keyword">int</span> length = is.readInt();</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[length];</span><br><span class="line">            is.readFully(bytes);</span><br><span class="line">            <span class="keyword">return</span> Long.valueOf(<span class="keyword">new</span> String(bytes));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;时间协议&quot;&gt;&lt;a href=&quot;#时间协议&quot; class=&quot;headerlink&quot; title=&quot;时间协议&quot;&gt;&lt;/a&gt;时间协议&lt;/h1&gt;&lt;p&gt;前两天在看Netty的hello world的时候，里面举了个例子—创建时间协议服务器。通过学习，才知道这个协议很老的，甚至
      
    
    </summary>
    
    
      <category term="小知识点" scheme="https://huangyijie.com/tags/%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="网络" scheme="https://huangyijie.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>聊聊Spring的stereotype注解</title>
    <link href="https://huangyijie.com/2019/10/22/talk-spring-stereotype/"/>
    <id>https://huangyijie.com/2019/10/22/talk-spring-stereotype/</id>
    <published>2019-10-22T16:06:28.000Z</published>
    <updated>2020-01-18T16:44:35.511Z</updated>
    
    <content type="html"><![CDATA[<p>我们在使用Spring的时候，使用最多的注解是什么？我想除了@Bean就是@Component了吧？@Component位于spring-context库（5.1.8版本，文中未特别说明的情况下默认此版本）的org.springframework.stereotype包路径下面：</p><p><img src="http://githubimg.wxio.club/spring-stereotype-1.jpg" alt="Spring Stereotype 1"></p><p>会发现还有我们熟悉的@Controller，@Service，@Repository，这不就是Spring MVC里经常用到的么？</p><h2 id="什么是-Stereotype"><a href="#什么是-Stereotype" class="headerlink" title="什么是 Stereotype"></a>什么是 Stereotype</h2><p>Stereotype是一种J2EE特性，以下来自网友：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stereotype特性最早出现在J2EE6中（忘记是哪个JSR提出的了），</span><br><span class="line">可以理解为围绕着“元数据”功能而发展出来的一种设计模式，</span><br><span class="line">虽然我很难说清楚他属于23个设计模式中的哪一个，</span><br><span class="line">但是这确实已经是一种约定俗成的做法，</span><br><span class="line">只要看到Stereotype就应该像看到“Factory——工厂模式”、“Adapter——适配器模式”、“Facade——外观模式”一样，一眼就知道他的作用。</span><br></pre></td></tr></table></figure><p><strong>简单的说Stereotype特性就是用注解来告诉框架某个类是属于系统功能中的哪一层。</strong></p><h2 id="Stereotype-特性如何被使用"><a href="#Stereotype-特性如何被使用" class="headerlink" title="Stereotype 特性如何被使用"></a>Stereotype 特性如何被使用</h2><p>在Stereotype模式下，Spring为Controller-Service-Dao的分层模型分别提供了@Controller、@Service、@Repository注解。</p><p>我们按照Stereotype的模式为对应的类标记3个注解，然后在引入MVC、ORM、JPA相关的框架之后这些注解会告诉框架对应的类扮演着什么样的功能角色，框架就能很清晰的根据注解提供相关的功能服务。</p><p>例如引入spring-webmvc库后，类如果被@Controller注解标记，框架就知道他们都是处理前端请求的，框架就会为他提供RequestMapping之类的功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们在使用Spring的时候，使用最多的注解是什么？我想除了@Bean就是@Component了吧？@Component位于spring-context库（5.1.8版本，文中未特别说明的情况下默认此版本）的org.springframework.stereotype包路径
      
    
    </summary>
    
    
      <category term="Java" scheme="https://huangyijie.com/tags/Java/"/>
    
      <category term="技术" scheme="https://huangyijie.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>免费申请 JetBrains 全产品 License</title>
    <link href="https://huangyijie.com/2019/10/21/JetBrains-All-Products-Pack-license/"/>
    <id>https://huangyijie.com/2019/10/21/JetBrains-All-Products-Pack-license/</id>
    <published>2019-10-21T15:18:50.000Z</published>
    <updated>2020-01-18T16:44:35.511Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个开发者选择的IDE，不管是Java，JS，还是Python，可能最好用的IDE就是JetBrains家的了。就比如我，作为一个喜欢倒腾新语言的人，每当想要写个程序的时候就会想JetBrains有没有这种语言的IDE，然后就会发现有针对Go的GoLand，针对Python的PyCharm，针对JS的WebStorm等等。</p><p>可是一个现实的问题摆在面前，就是License贵啊，再加上每种IDE都有License需求，那就更贵了啊！</p><p>但是现在有办法免费获取JetBrains家全系列产品的License了–<strong>使用个人或者团队的开源项目申请</strong>，虽然是一年有效期，但是他们会在快到期前提醒你，然后就可以重新申请审核再续一年了。</p><h2 id="准备个人开源项目"><a href="#准备个人开源项目" class="headerlink" title="准备个人开源项目"></a>准备个人开源项目</h2><p>首先要准备自己的开源项目，比如我使用的 <a href="https://github.com/henryhuang/oishi，JetBrains官方似乎对于项目的" target="_blank" rel="noopener">https://github.com/henryhuang/oishi，JetBrains官方似乎对于项目的</a> star 没有强制要求，但是不排除以后有要求。</p><h2 id="添加项目-License"><a href="#添加项目-License" class="headerlink" title="添加项目 License"></a>添加项目 License</h2><p>然后需要给项目添加 License，在项目主页点击 Create new file，然后输入 LICENSE 后，输入框右边就会自动弹出 License 类型的选择，点击它选择一个尽量开放的类型，比如我选择的是 MIT。</p><h2 id="申请-JetBrains-License"><a href="#申请-JetBrains-License" class="headerlink" title="申请 JetBrains License"></a>申请 JetBrains License</h2><p>之后就可以开始填写申请信息了，去到 <a href="https://www.jetbrains.com/shop/eform/opensource" target="_blank" rel="noopener">https://www.jetbrains.com/shop/eform/opensource</a> 填写内容：</p><p><img src="http://githubimg.wxio.club/www.jetbrains.com_shop_eform_opensource.png" alt="申请表"></p><p>基本上就按照输入框Place Holder里提示的填写就可以了，注意的一点就是 No. of required licenses 填写项目提交代码的人数，他们按照这个来决定所对应的License需求数量。</p><p>提交申请后，会收到邮件表明他们已经收到了申请，会在接下来的几天处理：</p><p><img src="http://githubimg.wxio.club/jetbrains1.jpg" alt="JetBrains邮件1"></p><p>大概等待1-2天后，会收到申请成功的通知：</p><p><img src="http://githubimg.wxio.club/jetbrains2.jpg" alt="JetBrains邮件2"></p><h2 id="激活-JetBrains-License"><a href="#激活-JetBrains-License" class="headerlink" title="激活 JetBrains License"></a>激活 JetBrains License</h2><p>点击申请成功的邮件中的 <strong>Take me to my license(s)</strong>，然后会被要求创建一个账号，之后会收到激活邮件：</p><p><img src="http://githubimg.wxio.club/jetbrains3.jpg" alt="JetBrains邮件3"></p><p>点击 <strong>Confirm your account</strong> 后进入个人中心。</p><p>点击 <strong>Active subscriptions</strong> 激活 License。之后选择 License 点击 Assign，输入创建账号的邮箱，完成后就会收到邮件表示已经授予这个账号License使用权限了：</p><p><img src="http://githubimg.wxio.club/jetbrains4.jpg" alt="JetBrains邮件4"></p><h2 id="使用-JetBrains-License"><a href="#使用-JetBrains-License" class="headerlink" title="使用 JetBrains License"></a>使用 JetBrains License</h2><p>激活 License 后，打开 Idea （其他产品也行），选择 JetBrains Account，输入注册的邮箱和密码后点击 Activate 就可以了：</p><p><img src="http://githubimg.wxio.club/jetbrains5.jpg" alt="使用License">。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一个开发者选择的IDE，不管是Java，JS，还是Python，可能最好用的IDE就是JetBrains家的了。就比如我，作为一个喜欢倒腾新语言的人，每当想要写个程序的时候就会想JetBrains有没有这种语言的IDE，然后就会发现有针对Go的GoLand，针对Pyth
      
    
    </summary>
    
    
      <category term="IDE" scheme="https://huangyijie.com/tags/IDE/"/>
    
      <category term="教程" scheme="https://huangyijie.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="开发" scheme="https://huangyijie.com/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Aloha 一个Hexo主题</title>
    <link href="https://huangyijie.com/2019/06/30/one-hexo-theme-aloha/"/>
    <id>https://huangyijie.com/2019/06/30/one-hexo-theme-aloha/</id>
    <published>2019-06-30T05:44:04.000Z</published>
    <updated>2020-01-18T16:44:35.511Z</updated>
    
    <content type="html"><![CDATA[<p>好久没写了，想抬笔但是总是不知道写啥，也没耐心完整地写完一篇，想了想用这个方式开始，介绍一下自己以前的一个<a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a>主题– Aloha。</p><ul><li>项目地址 <a href="https://github.com/henryhuang/hexo-theme-aloha" target="_blank" rel="noopener">https://github.com/henryhuang/hexo-theme-aloha</a></li><li>预览地址 <a href="https://huangyijie.com/hexo-theme-aloha/">https://huangyijie.com/hexo-theme-aloha/</a></li><li>使用Wiki <a href="https://github.com/henryhuang/hexo-theme-aloha/wiki" target="_blank" rel="noopener">https://github.com/henryhuang/hexo-theme-aloha/wiki</a></li></ul><p>这个主题就是很正常的一个博客布局，亮点是我使用了<a href="https://semantic-ui.com" target="_blank" rel="noopener">Semantic UI</a>，喜欢Semantic UI的人可以用。</p><p>打开后很简洁：</p><p><img src="http://githubimg.wxio.club/2019-06-30-one-hexo-theme-aloha/1.jpg" alt="首页"></p><p>点击左上角的按钮后就会显示侧边栏，侧边栏集合了个人头像、个人社交链接图标以及菜单：</p><p><img src="http://githubimg.wxio.club/2019-06-30-one-hexo-theme-aloha/2.jpg" alt="侧边栏"></p><p>文章页是如下效果，右侧可以显示TOC，底部是上下篇文章的快速导航：</p><p><img src="http://githubimg.wxio.club/2019-06-30-one-hexo-theme-aloha/3.jpg" alt="文章页"></p><p>具体的使用可以查看GitHub的项目<a href="https://github.com/henryhuang/hexo-theme-aloha/wiki" target="_blank" rel="noopener">Wiki</a>页。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久没写了，想抬笔但是总是不知道写啥，也没耐心完整地写完一篇，想了想用这个方式开始，介绍一下自己以前的一个&lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;主题– Aloha。&lt;/p&gt;
&lt;ul&gt;
      
    
    </summary>
    
    
      <category term="前端" scheme="https://huangyijie.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Hexo" scheme="https://huangyijie.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>泰国之旅 [三]</title>
    <link href="https://huangyijie.com/2019/06/24/thailand-trip-3/"/>
    <id>https://huangyijie.com/2019/06/24/thailand-trip-3/</id>
    <published>2019-06-24T15:01:00.000Z</published>
    <updated>2020-01-18T16:44:35.511Z</updated>
    
    <content type="html"><![CDATA[<p>今天要去下一个地点 芭提雅 了。</p><p>行程安排：金佛色 -&gt; 唐人街 -&gt; 芭提雅 </p><p>车是在中午，所以游玩的时间只有上午，由于酒店的位置的原因，所以只能选择去金佛色和唐人街这条线了。</p><p>从酒店直接打Grab就可以直接到金佛色了，司机还是很熟悉的，知道哪里可以下车。</p><h2 id="金佛寺"><a href="#金佛寺" class="headerlink" title="金佛寺"></a>金佛寺</h2><p><img src="http://githubimg.wxio.club/thailand-trip-3/01.jpg" alt="金佛寺"></p><p>以下转自某度：</p><blockquote><p>金佛寺，又称黄金佛寺，是 泰国 华人对该寺的称呼，位于Hua Lamphong火车站西南面的唐人街， 曼谷 火车总站附近，若搭乘地铁，可在Hua Lamphong站下车，西南不远即是。为 泰国 著名寺庙， 泰国 三大国宝之一。据说这座寺院由三位华人集资建成，故又称三华寺或三友寺。<br>金佛寺因供奉一尊世界最大金佛而闻名。一尊用纯金(注：另一说是约60%含金量，此有待考证)铸成的如来佛像，重5.5吨，高近4米，盘坐的双膝相距3米有余，金光灿烂，庄严肃穆。是 泰国 素可泰 时代的艺术品，也是 泰国 和佛教的无价宝。</p></blockquote><p><img src="http://githubimg.wxio.club/thailand-trip-3/02.jpg" alt="金佛寺2"></p><p>金佛寺下面是一个曼谷唐人的展览，可以很全面地了解中国人在曼谷的历史（基本上算是我们潮汕 人在曼谷的历史）。</p><p><img src="http://githubimg.wxio.club/thailand-trip-3/03.jpg" alt="金佛寺3"></p><p><img src="http://githubimg.wxio.club/thailand-trip-3/04.jpg" alt="金佛寺4"></p><h2 id="唐人街"><a href="#唐人街" class="headerlink" title="唐人街"></a>唐人街</h2><p>之后就去了唐人街，可惜没多长时间可以逛，就在这里吃了一个面。</p><p><img src="http://githubimg.wxio.club/thailand-trip-3/05.jpg" alt="唐人街1"></p><p>在路面买了杯咖啡，虽说是路边的，但是都是真材实料现磨的，夏日解渴真的很合适！</p><p><img src="http://githubimg.wxio.club/thailand-trip-3/06.jpg" alt="唐人街2"></p><p>这么走走的一上午就没了，回酒店等待车上门接。</p><p>等待期间专门去吃了个 泰国 本地真宗的午饭，只是我真的不习惯这个味道: (</p><p><img src="http://githubimg.wxio.club/thailand-trip-3/07.jpg" alt="曼谷1"></p><p>车来了，走了（此车非车）。</p><p><img src="http://githubimg.wxio.club/thailand-trip-3/08.jpg" alt="曼谷2"></p><h2 id="芭提雅"><a href="#芭提雅" class="headerlink" title="芭提雅"></a>芭提雅</h2><p>到了芭提雅天快黑了， 芭提雅就在海边，这是芭提雅的海映入我眼帘的第一画面，当时还是很兴奋的。</p><p><img src="http://githubimg.wxio.club/thailand-trip-3/09.jpg" alt="芭提雅1"></p><p>酒店就在海边，值得一提的是这是个摇滚主题的酒店，晚上还有摇滚小Party。</p><p><img src="http://githubimg.wxio.club/thailand-trip-3/10.jpg" alt="芭提雅2"></p><p>来芭提雅怎么能不去看秀呢？尤其是蒂芙尼的！真的是很好看，他们表演得很敬业！这是最后合照的场景，我就没去了。</p><p><img src="http://githubimg.wxio.club/thailand-trip-3/11.jpg" alt="芭提雅3"></p><p>之后去了一下步行街看了看，然后就回酒店睡觉了。</p><p>未完待续。</p><hr><p>同步在我的马蜂窝：<a href="http://www.mafengwo.cn/i/14372158.html" target="_blank" rel="noopener">泰国之旅 [三]</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天要去下一个地点 芭提雅 了。&lt;/p&gt;
&lt;p&gt;行程安排：金佛色 -&amp;gt; 唐人街 -&amp;gt; 芭提雅 &lt;/p&gt;
&lt;p&gt;车是在中午，所以游玩的时间只有上午，由于酒店的位置的原因，所以只能选择去金佛色和唐人街这条线了。&lt;/p&gt;
&lt;p&gt;从酒店直接打Grab就可以直接到金佛色了
      
    
    </summary>
    
    
      <category term="不说技术" scheme="https://huangyijie.com/tags/%E4%B8%8D%E8%AF%B4%E6%8A%80%E6%9C%AF/"/>
    
      <category term="旅行" scheme="https://huangyijie.com/tags/%E6%97%85%E8%A1%8C/"/>
    
      <category term="泰国" scheme="https://huangyijie.com/tags/%E6%B3%B0%E5%9B%BD/"/>
    
  </entry>
  
  <entry>
    <title>泰国之旅 [二]</title>
    <link href="https://huangyijie.com/2019/03/31/thailand-trip-2/"/>
    <id>https://huangyijie.com/2019/03/31/thailand-trip-2/</id>
    <published>2019-03-31T03:01:13.000Z</published>
    <updated>2020-01-18T16:44:35.511Z</updated>
    
    <content type="html"><![CDATA[<p>今天起来很早，可能是旅游的缘故，在国内早上起来很晚，而在曼谷就很早起来，可能是想争分夺秒的缘故吧。</p><p>虽然今天起来得很早，但是磨磨蹭蹭，再泡个澡，就10点了。</p><blockquote><p>曼谷悦榕庄 -&gt; Asok Spring SPA -&gt; Pier 21 Terminal 21 Food Court -&gt; 曼谷文化艺术中心 -&gt; 曼谷悦榕庄 -&gt; Patpong 夜市 -&gt; 曼谷悦榕庄</p></blockquote><p>久闻泰国马杀鸡大名，第一天起床就迫不及待地预约了一家在Asok BTS站附近的<strong>Spring SPA</strong>店。整个环境非常地轻松，SPA加泰式按摩真的是让人很放松！其实我所住的悦榕庄最有名的就是SPA，只是价格让人望而却步，所我就放弃了。</p><p>在曼谷遍地是按摩店，当然所指的是正规的。价格便宜，而且还是正宗泰式按摩。</p><p>这里提一下，我在马杀鸡之前在小商店买了瓶饮料，真的很好喝，有点像凉茶加蒟蒻，很推荐！</p><p><img src="http://githubimg.wxio.club/thai/1/waytoasok.jpeg" alt="去地铁站的路上"></p><p>由于是空腹马杀鸡，所以结束后很饿，也到了午饭时间，所以找了吃饭的地方-<strong>Terminal 21</strong>的美食街<strong>Pier 21</strong>，在这里我也将发现又一个爱上泰国的原因–美食！</p><p>阴差阳错，我点了份泰国炒面。第一口下去，我的天！怎会如此好吃！它看上去只是简单的鸡饭炒薄河粉，但是再加上它甜属性的调料，那就不一般了，非常符合我的胃口！</p><p><img src="http://githubimg.wxio.club/thai/1/pier21foods.jpeg" alt="Pier 21"></p><p>美中不足的是量太少了！于是我就寻找其他美食，找了碗鱼丸粉条和冰淇淋，由此而知泰国还是有好多华人文化的。</p><p>这个美食广场真的吃不完，我发誓还会再来。</p><p>吃完饭后就去下个目的地–<strong>曼谷文化艺术中心</strong>。坐BTS可以到那附近的一站 <strong>Ratchathewi</strong>，出站走两步就到了。这里吐槽一下谷歌地图，很不人性化，地铁站到了以后都没有说是哪个口出来，真的超级不方便。。。</p><p>一路上发现这里其实是购物集中地，网上推荐的暹罗百丽宫购物中心就在艺术中心对面。</p><p><img src="http://githubimg.wxio.club/thai/1/bbk_art.jpeg" alt="曼谷文化艺术中心门口雕塑"></p><p>虽说文化艺术中心是个必须来的，但可能最近没有什么活动，所以人不是很多，展品也不是很多，很多展厅没什么东西，不过整个文化艺术中心都是免费参观的。但是有点坑的是存包要钱，除非你有泰国身份证，不然就要掏10泰铢。</p><p><img src="http://githubimg.wxio.club/thai/1/bbk_art10.jpeg" alt="曼谷文化艺术中心1"></p><p><img src="http://githubimg.wxio.club/thai/1/bbk_art9.jpeg" alt="曼谷文化艺术中心2"></p><p><img src="http://githubimg.wxio.club/thai/1/bbk_art8.jpeg" alt="曼谷文化艺术中心3"></p><p><img src="http://githubimg.wxio.club/thai/1/bbk_art7.jpeg" alt="曼谷文化艺术中心4"></p><p><img src="http://githubimg.wxio.club/thai/1/bbk_art6.jpeg" alt="曼谷文化艺术中心5"></p><p><img src="http://githubimg.wxio.club/thai/1/bbk_art4.jpeg" alt="曼谷文化艺术中心6"></p><p><img src="http://githubimg.wxio.club/thai/1/bbk_art3.jpeg" alt="曼谷文化艺术中心7"></p><p><img src="http://githubimg.wxio.club/thai/1/bbk_art2.jpeg" alt="曼谷文化艺术中心8"></p><p><img src="http://githubimg.wxio.club/thai/1/bbk_art1.jpeg" alt="曼谷文化艺术中心9"></p><p><img src="http://githubimg.wxio.club/thai/1/bbk_art11.jpeg" alt="曼谷文化艺术中心10"></p><p>参观完艺术中心，下一站就是<strong>四面佛</strong>（其实不是专门去，看地图在回酒店的路上）。坐 BTS 到 <strong>Siam</strong>，然后往下一站一直走。曼谷的天气是真的热，还好曼谷有很多很长的天桥，不用在地上一直等过马路，省了很多时间，比如从地铁站出来就可以一直走到下一站，四面佛就在两点中间。</p><p>四面佛所在的神庙其实是个印度宗教的总计场所，四面佛是华人地区民间对梵天的俗称，“梵天”在佛教中亦称造书天、婆罗贺摩天、净天。原是印度教、婆罗门教三大主神之一的梵天，是创造宇宙之神，梵文字母的创制者（摘自百度百科词条《四面佛》）。</p><p><img src="http://githubimg.wxio.club/thai/1/four_face.jpeg" alt="四面佛"></p><p>往前走还有一个佛，也是印度相关的（话说曼谷印度人还是很多的），但是具体名字我忘了，浑身深蓝色。</p><p>话说走这一段是真的累，路过 <strong>Paragon Food Food Hall</strong>, 买了碗甜品吃。</p><p>之后只能回酒店了。坐地铁到 <strong>Sala Daeng</strong>，还要走很长一段才能到，真是累死了 :( 。</p><p>到酒店第一件事就是洗澡，在曼谷每出一次门回来就要洗澡，真的全是汗！</p><p>休息一会，就到吃完饭的时间了。我所在的悦榕庄酒店楼顶有超级网红高空露天餐厅，但可惜我一个人实在不好意思，也不太想上去。。。因为必须要穿正装！我带了那么多衣服，唯独没有这个。</p><p>还好，在我刚回来下地铁那里有一个夜市，后来我才知道那里是曼谷三大红灯区之一–Patpong。我是真的来夜市吃东西的，但进去一看。。。全是酒吧，夜店风采，于是我就走了。周围实在找不到吃的地方，于是就进了KFC，再然后就是有了新发现！</p><p>泰国的KFC和国内有很大区别，餐具是刀叉，饭有很多本地的风味的(这点想想就是)，最大的差别是。。。饮料是自助的，而且是百事公司全套，什么七喜，百事可乐，美年达等等。</p><p><img src="http://githubimg.wxio.club/thai/1/bbk_night_paphong.jpeg" alt="曼谷晚上的马路"></p><p>吃完就回酒店了，今天实在太累，睡觉了。</p><p>未完待续。</p><hr><p>同步在我的马蜂窝：<a href="http://www.mafengwo.cn/i/12216990.html" target="_blank" rel="noopener">泰国之旅 [二]</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天起来很早，可能是旅游的缘故，在国内早上起来很晚，而在曼谷就很早起来，可能是想争分夺秒的缘故吧。&lt;/p&gt;
&lt;p&gt;虽然今天起来得很早，但是磨磨蹭蹭，再泡个澡，就10点了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;曼谷悦榕庄 -&amp;gt; Asok Spring SPA -&amp;g
      
    
    </summary>
    
    
      <category term="不说技术" scheme="https://huangyijie.com/tags/%E4%B8%8D%E8%AF%B4%E6%8A%80%E6%9C%AF/"/>
    
      <category term="旅行" scheme="https://huangyijie.com/tags/%E6%97%85%E8%A1%8C/"/>
    
      <category term="泰国" scheme="https://huangyijie.com/tags/%E6%B3%B0%E5%9B%BD/"/>
    
  </entry>
  
  <entry>
    <title>泰国之旅 [一]</title>
    <link href="https://huangyijie.com/2019/03/18/thailand-trip-1/"/>
    <id>https://huangyijie.com/2019/03/18/thailand-trip-1/</id>
    <published>2019-03-18T13:36:31.000Z</published>
    <updated>2020-01-18T16:44:35.511Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有写了，猛然发现整整一个2018年都没有写，那就聊聊最近吧。</p><p>最近去了泰国，泰国是个好地方，这也是我第一次出国，自从2016年办理了护照以后就一直是白本，从此我的护照再也不是白本了。</p><p>整个泰国之旅还是挺满意的，就是时间太短，好多地方都没去。我是提前办理的旅游签证，机票定的是香港曼谷来回的土豪航空阿联酋航空，酒店的话就比较分散，两天曼谷悦榕庄，一天芭提雅硬石，两天曼谷美居。</p><blockquote><p>行程：深圳 -&gt; 香港 -&gt; 曼谷 -&gt; 芭提雅 -&gt; 曼谷 -&gt; 香港 -&gt; 深圳</p></blockquote><h2 id="第0天"><a href="#第0天" class="headerlink" title="第0天"></a>第0天</h2><p>下班后直接坐地铁去蛇口港坐船去香港机场，话说蛇口港是可以先办理行李托运的，我觉得很方便没多想就办理了，结果悲剧了–洗漱包忘了托运，里面都是瓶装液体。在去机场的路上想尽了办法，比如看能不能在机场存几天，比如寄给香港同事，改天让同事帮忙拿到深圳，又比如直接寄回深圳。但事与愿违，到了香港机场码头，直接就是安检！我根本没有时间找快递点，找存包点！安检员一个劲地说这个超过100毫升，这个也超过100毫升，问我要不要托运？我心想这怎么托运啊就一个小包。。。我掂了掂爽肤水和洗面奶的量，觉得快没了，忍痛割爱就扔了。。。好在进了机场后就买了同样的洗面奶，价格比在香港商场卖的便宜。</p><p><img src="http://githubimg.wxio.club/thai/0/hktrain.jpeg" alt="机场地铁"></p><p>之后撸了浦发机场贵宾厅后就登机了，话说虽然我这次去的比国泰的还有点差距，但比内地任何一个机场都好多了，包括北上广！</p><p><img src="http://githubimg.wxio.club/thai/0/hkrest.jpg" alt="贵宾厅"></p><p>土豪航空就是土豪航空，连屌丝经济舱的机上娱乐设施都这么好，丝毫不会觉得机上3小时会无聊，我在机上看了刚刚在国内上映的《绿皮书》。餐饮方面，还行吧，但由于我提前在贵宾厅大吃了一顿，导致我觉得还行。不过饮料种类挺多的，红酒，白酒，啤酒随便要。</p><p><img src="http://githubimg.wxio.club/thai/0/planeent.jpeg" alt="机上娱乐"></p><p><img src="http://githubimg.wxio.club/thai/0/emirate.jpeg" alt="阿联酋航空"></p><p><img src="http://githubimg.wxio.club/thai/0/planemenu.jpeg" alt="机上菜单"></p><p><img src="http://githubimg.wxio.club/thai/0/dinner.jpeg" alt="机上晚餐"></p><p>一部《绿皮书》（当时国内影院才刚上映），再看看风景，就到素万那普机场了。</p><p><img src="http://githubimg.wxio.club/thai/0/planebbk.jpeg" alt="机上曼谷夜景"></p><p>到了机场就是要入境了，由于我是提前办理了签证，所以就不用去排队办理落地签。没想到泰国机场对中国人还挺照顾，入境有几个窗口写了大大的“中国护照”，好像是中国护照专口，因为我看到有个欧美小哥在一个中国护照口排队排到了他的时候，工作人员不让他办理，他只能去其他窗口办理。</p><p>泰国还是比较热的，但是比较好的是所有的交通工具，室内场所都有空调。我对泰国的第一印象，是司机的热情和微笑，然后是接机车里的香味和曼谷司机一贯的飙车式开车。</p><p>接机直接送到酒店，迅速地 check in 后，就开始享受浦发五万积分兑换的曼谷悦榕庄了，真的很不错，浦发的大羊毛终于撸到了。</p><p><img src="http://githubimg.wxio.club/thai/0/minibar.jpeg" alt="悦榕庄minibar"></p><p><img src="http://githubimg.wxio.club/thai/0/banyantreenight.jpeg" alt="悦榕庄外夜景"></p><p>总的来说，除了安检扔了一些东西，今天从下班然后一路到曼谷还是挺顺利的，来到曼谷后的第一印象也没令我失望，司机的热情和微笑也令我难忘！一切都很顺利，很期待明天的到来。</p><p>关灯睡觉，待续。</p><hr><p>同步在我的马蜂窝：<a href="http://www.mafengwo.cn/i/12114866.html" target="_blank" rel="noopener">泰国之旅 [一]</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好久没有写了，猛然发现整整一个2018年都没有写，那就聊聊最近吧。&lt;/p&gt;
&lt;p&gt;最近去了泰国，泰国是个好地方，这也是我第一次出国，自从2016年办理了护照以后就一直是白本，从此我的护照再也不是白本了。&lt;/p&gt;
&lt;p&gt;整个泰国之旅还是挺满意的，就是时间太短，好多地方都没去。
      
    
    </summary>
    
    
      <category term="不说技术" scheme="https://huangyijie.com/tags/%E4%B8%8D%E8%AF%B4%E6%8A%80%E6%9C%AF/"/>
    
      <category term="旅行" scheme="https://huangyijie.com/tags/%E6%97%85%E8%A1%8C/"/>
    
      <category term="泰国" scheme="https://huangyijie.com/tags/%E6%B3%B0%E5%9B%BD/"/>
    
  </entry>
  
  <entry>
    <title>Nginx使用SSL证书配置https</title>
    <link href="https://huangyijie.com/2019/02/24/qcloud-nginx-ssl/"/>
    <id>https://huangyijie.com/2019/02/24/qcloud-nginx-ssl/</id>
    <published>2019-02-24T13:53:23.000Z</published>
    <updated>2020-01-18T16:44:35.511Z</updated>
    
    <content type="html"><![CDATA[<h2 id="申请SSL证书"><a href="#申请SSL证书" class="headerlink" title="申请SSL证书"></a>申请SSL证书</h2><p>首先申请SSL证书，这里以腾讯云的免费DVSSL证书为例，前往 <a href="https://console.cloud.tencent.com/ssl/apply" target="_blank" rel="noopener">https://console.cloud.tencent.com/ssl/apply</a></p><ul><li>填入通用名称，比如 <a href="http://www.wxio.club" target="_blank" rel="noopener">www.wxio.club</a></li><li>最好不要密码</li><li>填好其他信息</li><li>点击下一步，如果域名在腾讯云解析，就选择 <em>自动DNS验证</em>，否则按照选项进行配置</li><li>点击确认申请</li></ul><h2 id="下载和上传证书"><a href="#下载和上传证书" class="headerlink" title="下载和上传证书"></a>下载和上传证书</h2><p>前往 <a href="https://console.cloud.tencent.com/ssl" target="_blank" rel="noopener">https://console.cloud.tencent.com/ssl</a> 下载刚申请的证书，以 <a href="http://www.wxio.club" target="_blank" rel="noopener">www.wxio.club</a> 为例，解压后有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── Apache</span><br><span class="line">│   ├── 1_root_bundle.crt</span><br><span class="line">│   ├── 2_www.wxio.club.crt</span><br><span class="line">│   └── 3_www.wxio.club.key</span><br><span class="line">├── IIS</span><br><span class="line">│   ├── keystorePass.txt</span><br><span class="line">│   └── www.wxio.club.pfx</span><br><span class="line">├── Nginx</span><br><span class="line">│   ├── 1_www.wxio.club_bundle.crt</span><br><span class="line">│   └── 2_www.wxio.club.key</span><br><span class="line">├── Tomcat</span><br><span class="line">│   ├── keystorePass.txt</span><br><span class="line">│   └── www.wxio.club.jks</span><br><span class="line">└── www.wxio.club.csr</span><br></pre></td></tr></table></figure><p>复制Nginx里的 1_<a href="http://www.wxio.club_bundle.crt" target="_blank" rel="noopener">www.wxio.club_bundle.crt</a> 和 2_<a href="http://www.wxio.club.key" target="_blank" rel="noopener">www.wxio.club.key</a> 到服务器的 /etc/nginx （其实那都可以）</p><h2 id="配置-nginx-conf"><a href="#配置-nginx-conf" class="headerlink" title="配置 nginx.conf"></a>配置 nginx.conf</h2><p>编辑器打开 /etc/nginx/nginx.conf, 在 http 下面，添加或者修改配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name www.wxio.club wxio.club;</span><br><span class="line">        rewrite ^(.*)$ https://$&#123;server_name&#125;$1 permanent; # 这里是使 http 跳转到 https</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen 443;</span><br><span class="line">        server_name www.wxio.club wxio.club;</span><br><span class="line"></span><br><span class="line">        ssl on;</span><br><span class="line">        ssl_certificate 1_www.wxio.club_bundle.crt; # 这里可以写 .crt 的全路径</span><br><span class="line">        ssl_certificate_key 2_www.wxio.club.key; # 这里可以写 .key 的全路径</span><br><span class="line">        ssl_session_timeout 5m;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                root /home/git/www/public;</span><br><span class="line">                index index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重启-nginx-服务"><a href="#重启-nginx-服务" class="headerlink" title="重启 nginx 服务"></a>重启 nginx 服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;申请SSL证书&quot;&gt;&lt;a href=&quot;#申请SSL证书&quot; class=&quot;headerlink&quot; title=&quot;申请SSL证书&quot;&gt;&lt;/a&gt;申请SSL证书&lt;/h2&gt;&lt;p&gt;首先申请SSL证书，这里以腾讯云的免费DVSSL证书为例，前往 &lt;a href=&quot;https://c
      
    
    </summary>
    
    
      <category term="nginx" scheme="https://huangyijie.com/tags/nginx/"/>
    
      <category term="qcloud" scheme="https://huangyijie.com/tags/qcloud/"/>
    
      <category term="ssl" scheme="https://huangyijie.com/tags/ssl/"/>
    
      <category term="https" scheme="https://huangyijie.com/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>i18next</title>
    <link href="https://huangyijie.com/2017/08/28/i18next/"/>
    <id>https://huangyijie.com/2017/08/28/i18next/</id>
    <published>2017-08-28T03:26:12.000Z</published>
    <updated>2020-01-18T16:44:35.511Z</updated>
    
    <content type="html"><![CDATA[<p>I18next 是一款用JavaScript编写的国际化框架。</p><h3 id="为什么需要国际化"><a href="#为什么需要国际化" class="headerlink" title="为什么需要国际化"></a>为什么需要国际化</h3><p>一般在编写网站的时候，网页需要向用户展现一些文字，假如你的网站完全面向中国用户，那么你可以把网页里的内容写成中文。但是如果你还要面向英文用户，那么你就不能直接把内容写成中文了，你的网站需要国际化。你需要使用一些技术来让程序自动切换内容的显示，网页的总体结构是不变的，但是内容需要随着用户的改变而改变。</p><p>但是可能有人会说，各准备一个英文和一个中文的网页不就可以了吗？那么请问以后再出现法文，葡萄牙文，西班牙文的需求呢？这种需求其实很常见，比如ebay.com，它面向不同国家有不同的显示，甚至在一个国家还有多种显示（比如加拿大，分为加拿大英语区和加拿大法语区）。如果针对一种语言准备一套网站，那将是大大的代码冗余和资源的浪费。</p><h3 id="为什么使用i18next"><a href="#为什么使用i18next" class="headerlink" title="为什么使用i18next"></a>为什么使用i18next</h3><p>I18next提供了JavaScript开发中能想到的所有关于i18n的需求，它提供了一个完整的解决方案，不管是本地客户端还是服务端，移动端Web还是桌面端Web。当然，它不仅仅可以用在JavaScript平台，它还能用在其他平台，比如php，ios等。</p><p>以下是官方的一段话：</p><blockquote><p>Learn once - use everywhere. The community made integrations for frameworks like react.js, angular.js, vue.js and many more. But this is not where it ends…you can use i18next with node.js, php, ios, android and other platforms.</p></blockquote><blockquote><p>I18next reached not only the web, but also mobile and desktop development.</p></blockquote><p>翻译过来大概意思是：它的社区已经将i18next和react.js，angular.js，vue.js等热门的框架集成，而且你能在Node.js，php，ios，android等平台上使用，除了Web端，你还能在手机端桌面端的开发中使用。</p><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># yarn</span><br><span class="line">$ yarn add i18next</span><br><span class="line"></span><br><span class="line"># npm</span><br><span class="line">$ npm install i18next --save</span><br><span class="line"></span><br><span class="line"># bower</span><br><span class="line">$ bower install i18next</span><br></pre></td></tr></table></figure><h4 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h4><p>这里直接修改自官网的Hello World：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i18next = <span class="built_in">require</span>(<span class="string">'i18next'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">  lng: <span class="string">'en'</span>,</span><br><span class="line">  resources: &#123;</span><br><span class="line">    en: &#123;</span><br><span class="line">      translation: &#123;</span><br><span class="line">        <span class="string">"hello-world"</span>: <span class="string">"Hello world!"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">err, t</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i18next.t(<span class="string">'hello-world'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i18next.init(option, callback);</span><br></pre></td></tr></table></figure><p>执行过后会输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ node .</span><br><span class="line">Hello world!</span><br><span class="line">Done in 0.18s.</span><br></pre></td></tr></table></figure><p>这里调用的是 i18next 的 init() api 进行初始化，init()需要传入两个参数option和callback函数。</p><p>在 callback 函数中, <strong>i18next.t(‘hello-world’)</strong> 就是键 ‘hello-world’ 所对应值 ‘Hello world!’。</p><p>在 option 中，lng 表示当前采用的是 en 语言所对应的资源，而 resources 就是资源配置。那么，如果想输出中文呢？很简单，只要在 resources 中加入对应语言的键值对即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i18next = <span class="built_in">require</span>(<span class="string">'i18next'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> option = &#123;</span><br><span class="line">  lng: <span class="string">'zh_CN'</span>,</span><br><span class="line">  resources: &#123;</span><br><span class="line">    en: &#123;</span><br><span class="line">      translation: &#123;</span><br><span class="line">        <span class="string">"hello-world"</span>: <span class="string">"Hello world!"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    zh_CN: &#123;</span><br><span class="line">      translation: &#123;</span><br><span class="line">        <span class="string">"hello-world"</span>: <span class="string">"你好世界！"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">err, t</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i18next.t(<span class="string">'hello-world'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i18next.init(option, callback);</span><br></pre></td></tr></table></figure><p>再将 option.lng 改为 ‘zh_CN’，这样执行后输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ node .</span><br><span class="line">你好世界！</span><br><span class="line">Done in 0.18s.</span><br></pre></td></tr></table></figure><p>最基本的国际化方案就是这么简单，实际应用中会根据用户的某些国家属性来决定使用哪套资源，举个例子，用eBay来说，假如用户直接访问 <a href="http://www.ebay.com，系统会默认显示英文，假如用户访问www.ebay.ch，看上去整个网页的结构布局和" target="_blank" rel="noopener">www.ebay.com，系统会默认显示英文，假如用户访问www.ebay.ch，看上去整个网页的结构布局和</a> <a href="http://www.ebay.com" target="_blank" rel="noopener">www.ebay.com</a> 一样，只不过语言变成了德文，这里就是根据域名的不同来选择不同的服务器，而不同的服务器实际上运行的是一套代码。</p><p>当然还可以根据用户所在国家自动显示不同的语言，在这里就不多说了。</p><p>以上代码完整的项目地址是 <a href="https://github.com/henryhuang/i18next-samples/tree/master/i18next-basic-sample" target="_blank" rel="noopener">https://github.com/henryhuang/i18next-samples/tree/master/i18next-basic-sample</a> .</p><h3 id="结合-Express-使用"><a href="#结合-Express-使用" class="headerlink" title="结合 Express 使用"></a>结合 Express 使用</h3><p>主要的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 i18next</span></span><br><span class="line">i18n.use(i18nMiddleware.LanguageDetector).use(i18nFsBackend).init(&#123;</span><br><span class="line">  lng: <span class="string">'en'</span>,</span><br><span class="line">  preload: [</span><br><span class="line">    <span class="string">'en'</span>, <span class="string">'zh-CN'</span></span><br><span class="line">  ],</span><br><span class="line">  backend: &#123;</span><br><span class="line">    loadPath: path.resolve(__dirname, <span class="string">'./lang/&#123;&#123;lng&#125;&#125;/translation.json'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">app.use(i18nMiddleware.handle(i18n));</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/lang/:lang'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.cookie(<span class="string">'i18next'</span>, req.params.lang);</span><br><span class="line">  res.redirect(<span class="string">'/'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>完整的项目代码在这里 <a href="https://github.com/henryhuang/i18next-samples/tree/master/i18next-express-sample" target="_blank" rel="noopener">https://github.com/henryhuang/i18next-samples/tree/master/i18next-express-sample</a> .</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I18next 是一款用JavaScript编写的国际化框架。&lt;/p&gt;
&lt;h3 id=&quot;为什么需要国际化&quot;&gt;&lt;a href=&quot;#为什么需要国际化&quot; class=&quot;headerlink&quot; title=&quot;为什么需要国际化&quot;&gt;&lt;/a&gt;为什么需要国际化&lt;/h3&gt;&lt;p&gt;一般在编写网站
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://huangyijie.com/tags/JavaScript/"/>
    
      <category term="Node.js" scheme="https://huangyijie.com/tags/Node-js/"/>
    
      <category term="express" scheme="https://huangyijie.com/tags/express/"/>
    
      <category term="i18n" scheme="https://huangyijie.com/tags/i18n/"/>
    
  </entry>
  
  <entry>
    <title>错误排查：非ROOT用户使用密钥进行ssh登录提示输入密码</title>
    <link href="https://huangyijie.com/2017/07/07/non-root-user-config-for-ssh-key-login/"/>
    <id>https://huangyijie.com/2017/07/07/non-root-user-config-for-ssh-key-login/</id>
    <published>2017-07-07T14:36:06.000Z</published>
    <updated>2020-01-18T16:44:35.511Z</updated>
    
    <content type="html"><![CDATA[<p>由于个人的需要，需要搭建一个私有的git服务器，当然还需要有完善的操作界面，综合下来，我选择了<strong>Gogs</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">问：为什么不用GitHub呢？</span><br><span class="line">答：我们不想让别人看到我们的代码。</span><br><span class="line">问：GitHub有private的呀！</span><br><span class="line">答：那要钱，我们没钱。。。</span><br></pre></td></tr></table></figure><p>很顺序按照官网的步骤一步一步搭建完成了（其实早就用过了，这是第N次的搭建），然后另一个人上传了代码（注意这是通过http的方式的），于是我去下载。</p><p>我不喜欢用http的方式，因为要输入密码，而且也不安全，所以一直保持着使用ssh的方式。首先我配置了个人的公钥，但是执行<strong>git clone</strong>以后一直都提示我输入密码！</p><p>于是我就开始了一步一步排查！</p><h3 id="客户端私钥配置"><a href="#客户端私钥配置" class="headerlink" title="客户端私钥配置"></a>客户端私钥配置</h3><p>一般情况下，ssh 会拿 <strong>~/.ssh/id_rsa</strong> 去连接，但是如果多个密钥对连接不同的域名的话，就需要在 <strong>~/.ssh/config</strong> 里进行指定域名的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">host &#123;&#123;domain&#125;&#125;</span><br><span class="line">user git</span><br><span class="line">hostname &#123;&#123;domian&#125;&#125;</span><br><span class="line">port 22</span><br><span class="line">identityfile ~/.ssh/id_rsa_2</span><br></pre></td></tr></table></figure><p>这里的 <strong>~/.ssh/id_rsa_2</strong> 就是我配置在 Gogs 的公钥所对应的私钥，这样我进行 <strong>git clone git@domian:username/repo.git</strong> 的时候就会去拿 <strong>~/.ssh/id_rsa_2</strong> 了。</p><h3 id="文件权限问题"><a href="#文件权限问题" class="headerlink" title="文件权限问题"></a>文件权限问题</h3><p>首先确认了一下，以下文件和文件夹都是属于 Gogs 的运行用户和用户组（git:git）的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/home/git/.ssh</span><br><span class="line">/home/git/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>我们使用 ssh 的方式 clone repository, 其实所使用的 ssh 用户 是 git，git用户相对于系统的root用户就是个非root用户了。</p><p>ssh对于非root用户的密钥限制是非常严格的，它不允许以上的文件夹和文件有太大的权限，.ssh只需要700，而authorized_keys只需要600。执行以下命令确认权限问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 700 /home/git/.ssh</span><br><span class="line">chmod 600 /home/git/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>可是，再运行 git clone 还是提示需要密码！</p><h3 id="sshd-config配置问题"><a href="#sshd-config配置问题" class="headerlink" title="sshd_config配置问题"></a>sshd_config配置问题</h3><p>首先打开日志进行错误跟踪：</p><blockquote><p>注意先把 <strong>/etc/ssh/sshd_config</strong> 的 <strong>LogLevel</strong> 改成 <strong>DEBUG</strong>，不然看不到debug级别的日志。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /var/<span class="built_in">log</span>/auth.log</span><br></pre></td></tr></table></figure><p>然后在客户端执行 git clone 命令，看到了 /var/log/auth.log里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Jul  7 22:57:24 localhost sshd[13061]: debug1: temporarily_use_uid: 1003/1003 (e=0/0)</span><br><span class="line">Jul  7 22:57:24 localhost sshd[13061]: debug1: trying public key file /root/.ssh/authorized_keys</span><br><span class="line">Jul  7 22:57:24 localhost sshd[13061]: debug1: Could not open authorized keys &apos;/root/.ssh/authorized_keys&apos;: Permission denied</span><br><span class="line">Jul  7 22:57:24 localhost sshd[13061]: debug1: restore_uid: 0/0</span><br><span class="line">Jul  7 22:57:24 localhost sshd[13061]: Failed publickey for git from 180.158.160.234 port 50987 ssh2: RSA ......</span><br></pre></td></tr></table></figure><p>上面的这一条引起了注意：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Jul  7 22:57:24 localhost sshd[13061]: debug1: Could not open authorized keys &apos;/root/.ssh/authorized_keys&apos;: Permission denied</span><br></pre></td></tr></table></figure><p>很奇怪ssh为什么去读root用户的authorized_keys，而不是git用户的。</p><p>于是打开 <strong>/etc/ssh/sshd_config</strong>，找到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AuthorizedKeysFile      ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>这里错了，应该是 <strong>.ssh/authorized_keys</strong>！改完以后是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AuthorizedKeysFile      .ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>如果是 <strong>~/.ssh/authorized_keys</strong> ，那么ssh就去拿了 <strong>/root/.ssh/authorized_keys</strong>，而不是所请求的用户（git）的 <strong>~/.ssh/authorized_keys</strong> 了，为什么呢？这是我自己的理解：首先ssh在获取到了请求用户的用户名后（使用git clone的话一般是git用户），然后ssh就会设置当前目录在git用户的home目录下，如果配置 <strong>.ssh/authorized_keys</strong> ，就能拿到 git 用户所需要的 <strong>authorized_keys</strong> 了，但是如果配置 <strong>~/.ssh/authorized_keys</strong>，则去拿了ssh service的执行者root用户的home下面的 <strong>.ssh/authorized_keys</strong> 了。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一般出现使用 ssh 的方式进行 git 远程操作（比如 git clone），出现需要密码的情况，或者配置了密钥进行 ssh 登录，但是还是需要密码的情况，可以先从以下三点进行错误排查：</p><ul><li>客户端私钥是否指定正确</li><li>非root用户的文件权限是否有问题</li><li>sshd_config配置是否有问题</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于个人的需要，需要搭建一个私有的git服务器，当然还需要有完善的操作界面，综合下来，我选择了&lt;strong&gt;Gogs&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="linux" scheme="https://huangyijie.com/tags/linux/"/>
    
      <category term="ssh" scheme="https://huangyijie.com/tags/ssh/"/>
    
      <category term="git" scheme="https://huangyijie.com/tags/git/"/>
    
      <category term="gogs" scheme="https://huangyijie.com/tags/gogs/"/>
    
  </entry>
  
  <entry>
    <title>使用Github、Travis-CI和Coding.net自动部署博客［三］</title>
    <link href="https://huangyijie.com/2017/06/22/blog-with-github-travis-ci-and-coding-net-3/"/>
    <id>https://huangyijie.com/2017/06/22/blog-with-github-travis-ci-and-coding-net-3/</id>
    <published>2017-06-22T14:32:47.000Z</published>
    <updated>2020-01-18T16:44:35.511Z</updated>
    
    <content type="html"><![CDATA[<p>迟迟到来的第三篇，也就是最后一篇。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">provider:</span> <span class="string">script</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">sh</span> <span class="string">.travis/deploy.sh</span></span><br><span class="line">  <span class="attr">skip_cleanup:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">on:</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>这是 Travis CI 的部署步骤的配置，“部署” 是整个工作流的最后一步，这里只注意 <strong>branch: master</strong>，道理和上一个说明一样，其他照抄；</p><h3 id="编写部署脚本"><a href="#编写部署脚本" class="headerlink" title="编写部署脚本"></a>编写部署脚本</h3><p><strong>Travis CI</strong> 的工作流最后一步是<strong>部署</strong>的功能，我们利用它本身的配置需求进行配置，并且编写相关脚本，这样就可以达到部署博客的需求了。</p><p>在博客根目录下添加 <strong>.travis</strong> 文件夹，文件目录结构为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">blogroot // 博客根目录</span><br><span class="line">└── .travis</span><br><span class="line">    ├── deploy.sh</span><br><span class="line">    ├── private_key.enc</span><br><span class="line">    └── ssh_config</span><br></pre></td></tr></table></figure><ul><li>deploy.sh 是执行脚本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Decrypt the private key</span></span><br><span class="line">openssl aes-256-cbc -K $encrypted_adc0b7f2dba9_key -iv $encrypted_adc0b7f2dba9_iv -in .travis/private_key.enc -out ~/.ssh/id_rsa -d</span><br><span class="line"><span class="meta">#</span><span class="bash"> Set the permission of the key</span></span><br><span class="line">chmod 600 ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Start SSH agent</span></span><br><span class="line">eval $(ssh-agent)</span><br><span class="line"><span class="meta">#</span><span class="bash"> Add the private key to the system</span></span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br><span class="line"><span class="meta">#</span><span class="bash"> Copy SSH config</span></span><br><span class="line">cp .travis/ssh_config ~/.ssh/config</span><br><span class="line"><span class="meta">#</span><span class="bash"> Set Git config</span></span><br><span class="line">git config --global user.name "henryhuang"</span><br><span class="line">git config --global user.email h1886@outlook.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Deploy to GitHub</span></span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>这个脚本的功能就是执行 <strong>hexo deploy</strong>，有人说那直接执行不就完了吗？</p><p>非也！我们要部署代码，就是要执行 <strong>git push</strong> 的操作，而这一步是需要 <strong>ssh key</strong> 的，否则你是没有权限给一个 git repository push 代码的，而这个脚本除了最后一步，其他所有的代码都是在构建这个带 ssh key 的上下文环境。</p><p>什么都不用管，照抄就行，只用管以下两个配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Decrypt the private key</span></span><br><span class="line">openssl aes-256-cbc -K $encrypted_adc0b7f2dba9_key -iv $encrypted_adc0b7f2dba9_iv -in .travis/private_key.enc -out</span><br></pre></td></tr></table></figure><p>这行代码的作用就是获取你的key，毕竟私钥是不能放到代码里了，要是被别人看到了怎么办？所以Travis让你在本地用Travis知道的key对你的私钥进行加密，得到这个 <strong>private_key.enc</strong>，而这个key是由你自己配置到Travis上的，而这个key的名字是什么呢？就是上面的 $encrypted_adc0b7f2dba9_key 和 $encrypted_adc0b7f2dba9_iv，具体怎么配置，可以查看官网的说明 <a href="https://docs.travis-ci.com/user/encrypting-files/#Automated-Encryption" target="_blank" rel="noopener">https://docs.travis-ci.com/user/encrypting-files/#Automated-Encryption</a>.</p><p>最后编写完成脚本后，上传代码到GitHub就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;迟迟到来的第三篇，也就是最后一篇。&lt;/p&gt;
&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;
      
    
    </summary>
    
    
      <category term="github" scheme="https://huangyijie.com/tags/github/"/>
    
      <category term="travis" scheme="https://huangyijie.com/tags/travis/"/>
    
      <category term="coding.net" scheme="https://huangyijie.com/tags/coding-net/"/>
    
  </entry>
  
  <entry>
    <title>使用EditorConfig</title>
    <link href="https://huangyijie.com/2017/06/21/use-editorconfig/"/>
    <id>https://huangyijie.com/2017/06/21/use-editorconfig/</id>
    <published>2017-06-21T12:56:27.000Z</published>
    <updated>2020-01-18T16:44:35.511Z</updated>
    
    <content type="html"><![CDATA[<p>使用不同编辑器，比如IDE（Eclipse，Intellij IDEA），又使用不同OS（Mac，Windows等），难免会碰到编码风格不一致的情况，那怎么办？</p><p>使用 <strong>EditorConfig</strong>！</p><h2 id="有什么好处？"><a href="#有什么好处？" class="headerlink" title="有什么好处？"></a>有什么好处？</h2><p>当你将代码推送到GitHub时，你可以避免Mac和Windows之间的<strong>换行符冲突</strong>，以及其他多人协作开发中遇到的事情。</p><h2 id="什么是EditorConfig？"><a href="#什么是EditorConfig？" class="headerlink" title="什么是EditorConfig？"></a>什么是EditorConfig？</h2><p>这段摘自官方网站。</p><p>EditorConfig帮助开发人员在不同的编辑器和IDE之间定义和维护一致的编码风格。 EditorConfig项目包括<strong>用于定义编码样式的文件格式</strong>和<strong>文本编辑器插件</strong>，使编辑器能够读取文件格式并遵守定义的样式。 EditorConfig文件易于阅读，可以使<strong>版本控制系统</strong>（Git等）保持良好的工作环境。</p><h2 id="示例配置文件"><a href="#示例配置文件" class="headerlink" title="示例配置文件"></a>示例配置文件</h2><p>EditorConfig的配置文件名称是 <strong>.editorconfig </strong>，将以下内容添加到此文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[*]</span><br><span class="line">end_of_line = lf</span><br></pre></td></tr></table></figure><p>然后当你打开一个文件时，EditorConfig插件将使文件的<strong>换行符换成 LF </strong>。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>1.在你的编辑器或者IDE中添加插件</p><p><a href="http://editorconfig.org/#download" target="_blank" rel="noopener">http://editorconfig.org/#download</a></p><p>以上链接的eclipse插件需要从Eclipse Marketplace进行安装。如果没有Eclipse Marketplace入口，你可以使用<strong>https：//editorconfig-eclipse.github.io/repository</strong>进行安装。</p><p>2.将.editorconfig文件添加到项目的<strong>根目录</strong>（对于Windows用户：要在Windows资源管理器中创建.editorconfig文件，你需要创建一个名为<strong>.editorconfig.</strong>的文件，Windows资源管理器将自动重命名为.editorconfig）</p><p>并添加内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root = true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">end_of_line = lf</span><br></pre></td></tr></table></figure><p>更多配置参见<a href="https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties。" target="_blank" rel="noopener">https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties。</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>请注意，EditorConfig不仅可以避免换行冲突，还可以避免<strong>缩进样式，缩进大小，字符集等冲突</strong>。</p><p>对于git的autocrlf配置，这个博文<a href="https://github.com/cssmagic/blog/issues/22可能对你有用。" target="_blank" rel="noopener">https://github.com/cssmagic/blog/issues/22可能对你有用。</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用不同编辑器，比如IDE（Eclipse，Intellij IDEA），又使用不同OS（Mac，Windows等），难免会碰到编码风格不一致的情况，那怎么办？&lt;/p&gt;
&lt;p&gt;使用 &lt;strong&gt;EditorConfig&lt;/strong&gt;！&lt;/p&gt;
&lt;h2 id=&quot;有什么
      
    
    </summary>
    
    
      <category term="coding" scheme="https://huangyijie.com/tags/coding/"/>
    
      <category term="IDE" scheme="https://huangyijie.com/tags/IDE/"/>
    
      <category term="editor" scheme="https://huangyijie.com/tags/editor/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript执行window.print()打印内容为空白</title>
    <link href="https://huangyijie.com/2016/10/08/js-window-print-blank/"/>
    <id>https://huangyijie.com/2016/10/08/js-window-print-blank/</id>
    <published>2016-10-08T12:56:27.000Z</published>
    <updated>2020-01-18T16:44:35.511Z</updated>
    
    <content type="html"><![CDATA[<p>今天写代码的时候，需要用到打印页面的功能，按理说只要很简单的一段js代码就可以了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.print();</span><br></pre></td></tr></table></figure><p>但是很奇怪，怎么执行，要打印的页面内容都是空白！</p><p>于是一步一步分析，终于找到了罪魁祸首的代码片段：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> print &#123;</span><br><span class="line">    <span class="selector-tag">body</span> * &#123;</span><br><span class="line">        <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段 CSS 的作用就是当媒体类型为 print 的时候，body 里面所有元素都采用样式 “<strong>visibility: hidden;</strong>”，所以解决这个问题是<br>把 “<strong>visibility: hidden;</strong>” 去掉就可以了。</p><p>但是这里有两点可以说：</p><ol><li>写代码的时候，一个模块的功能不能影响到全局，这是谨慎也是需要第一位考虑的做法；</li><li>CSS 的 Media Type</li></ol><h3 id="Media-Type"><a href="#Media-Type" class="headerlink" title="Media Type"></a>Media Type</h3><h4 id="Media-Type-种类"><a href="#Media-Type-种类" class="headerlink" title="Media Type 种类"></a>Media Type 种类</h4><p><strong>Media Type</strong> 直译过来就是<strong>媒体类型</strong>，这是CSS2引入的属性，可以通过 <strong>@media</strong> 等方式给不同的媒体类型定义不同的CSS样式规则。上面讲到的，我在<strong>打印</strong>页面的时候，所处的媒体类型就是 <strong>print</strong>，一般我们在浏览网页的时候，媒体类型是 <strong>screen</strong>，W3C给出的媒体类型有以下十种（<strong>注意，名字是大小写敏感的</strong>）：</p><ol><li><strong>all</strong><br>适用于所有设备。</li><li><strong>braille</strong><br>用于盲文触觉反馈设备。</li><li><strong>embossed</strong><br>用于分页盲文打印机。</li><li><strong>handheld</strong><br>用于手持设备（通常是指有限带宽的小屏设备）。</li><li><strong>print</strong><br>用于分页材料和打印预览模式下在屏幕上查看的文档。</li><li><strong>projection</strong><br>用于投影机。</li><li><strong>screen</strong><br>主要用于彩色计算机屏幕。</li><li><strong>speech</strong><br>用于语音合成设备。</li><li><strong>tty</strong><br>适用于使用固定间距字符网格（如电传打字机，终端，或具有有限显示能力的便携式设备）的媒体。在“tty”类型中不应该使用像素单元。</li><li><strong>tv</strong><br>用于电视类设备（分辨率低，彩色，有限可滚动屏幕，有声音的）。</li></ol><h4 id="Media-Type-引入方式"><a href="#Media-Type-引入方式" class="headerlink" title="Media Type 引入方式"></a>Media Type 引入方式</h4><p>Media Type 有多种引入方式。</p><ol><li><p>@media方式引入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> print&#123;</span><br><span class="line">  <span class="selector-tag">body</span> * &#123;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 这种方式在 CSS 文件中 和 style 标签里都可以使用。</p></li><li><p>@import方式引入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">"css/print.css"</span>) print;</span><br></pre></td></tr></table></figure><p> 和上一种一样，这种方式在 CSS 文件中 和 style 标签里都可以使用。</p></li><li><p>link方法引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"../css/print.css"</span> <span class="attr">media</span>=<span class="string">"print"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>xml方式引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml-stylesheet rel="stylesheet" media="screen" href="css/style.css" ？&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天写代码的时候，需要用到打印页面的功能，按理说只要很简单的一段js代码就可以了：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;
      
    
    </summary>
    
    
      <category term="CSS" scheme="https://huangyijie.com/tags/CSS/"/>
    
      <category term="HTML" scheme="https://huangyijie.com/tags/HTML/"/>
    
      <category term="JavaScript" scheme="https://huangyijie.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用Github、Travis-CI和Coding.net自动部署博客［二］</title>
    <link href="https://huangyijie.com/2016/10/05/blog-with-github-travis-ci-and-coding-net-2/"/>
    <id>https://huangyijie.com/2016/10/05/blog-with-github-travis-ci-and-coding-net-2/</id>
    <published>2016-10-05T04:19:37.000Z</published>
    <updated>2020-01-18T16:44:35.511Z</updated>
    
    <content type="html"><![CDATA[<p>接着<a href="/2016/09/20/blog-with-github-travis-ci-and-coding-net-1/">第一篇</a>讲。</p><p>在确保注册 Travis CI 和已经安装了 <strong>Travis CI Command Line Client</strong> 之后，我们现在开始进行 Travis CI 相关的配置。</p><h3 id="添加-Travis-CI-配置文件"><a href="#添加-Travis-CI-配置文件" class="headerlink" title="添加 Travis CI 配置文件"></a>添加 Travis CI 配置文件</h3><p>在博客根目录下添加 Travis CI 所需要的配置文件 <strong>.travis.yml</strong>，配置文件内容和一些说明如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"5.11"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">apt:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="attr">addons:</span></span><br><span class="line">  <span class="attr">ssh_known_hosts:</span> <span class="string">git.coding.net</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="string">&amp;&amp;</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h4 id="个别说明"><a href="#个别说明" class="headerlink" title="个别说明"></a>个别说明</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"5.11"</span></span><br></pre></td></tr></table></figure><p>使用5.11版本的nodejs，具体在你本地控制台下使用 node -v 查看版本；</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">addons:</span></span><br><span class="line">  <span class="attr">ssh_known_hosts:</span> <span class="string">git.coding.net</span></span><br></pre></td></tr></table></figure><p>我是将代码部署到 Coding.net 上，所以配 git.coding.net，如果是部署到github 上，则配置为 github.com；</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span></span><br></pre></td></tr></table></figure><p>这个配置表示让 Travis CI 依次执行 hexo clean 和 hexo generate 命令</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>告诉 Travis CI 只监听 master 分支的变化，如果你的源码没有放在 master 分支，则做相应改变；</p><p>好了，其他没有说明的配置项则照抄。</p><p>写完以后，我们要使用 Travis CI Command Line 进行验证，看看配置文件有没有问题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis lint .travis.yml</span><br></pre></td></tr></table></figure><p>出现以下反馈则说明没有问题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hooray, .travis.yml looks valid :)</span><br></pre></td></tr></table></figure><h3 id="生成私钥加密文件"><a href="#生成私钥加密文件" class="headerlink" title="生成私钥加密文件"></a>生成私钥加密文件</h3><h4 id="什么是私钥？"><a href="#什么是私钥？" class="headerlink" title="什么是私钥？"></a>什么是私钥？</h4><p>私钥就是密钥对（密钥对指一对<strong>公钥</strong>和<strong>私钥</strong>），我们在使用 github 的时候，首先需要在 github 上配置<strong>公钥</strong>，这是最基础的。那么，存在我们本地的<strong>私钥</strong>就是你的个人身份标示，如果你的项目 git 地址配置的是 <a href="mailto:**git@github.com" target="_blank" rel="noopener">**git@github.com</a>:username/projectname.git**（相对的还有 <a href="https://github.com/username/projectname.git），" target="_blank" rel="noopener">https://github.com/username/projectname.git），</a> 当你在对 Repository 在一些操作（比如 push 等），则需要私钥进行身份验证了（这是自动验证的，如果是使用 https 的配置，则需要提供用户名和密码）。</p><p>我们在 Travis CI 上自动部署代码，就牵扯到了 push 操作，那么就需要提供<strong>私钥</strong>了。</p><p>新手首先理所当然觉得直接讲私钥放在项目里不就可以了吗？</p><p>你们啊，乃衣服！</p><h4 id="为什么生成私钥加密文件？"><a href="#为什么生成私钥加密文件？" class="headerlink" title="为什么生成私钥加密文件？"></a>为什么生成私钥加密文件？</h4><p>将私钥直接放在项目里，那么人人都能看到。<strong>私钥</strong>的泄露将会发生一系列的问题，比如有坏人拿你的私钥直接操作你的 git 项目，你能干啥他也能干啥（原理上面讲了），这咋整？我们需要对<strong>私钥</strong>进行加密。</p><p>Travis 提供了加密文件的支持，什么意思呢？我们可以对文件（这里指私钥）在本地进行加密，然后把加密过后的文件放在项目里，那么别人就无法获取里面的真实内容。然后我们在让 Travis 执行脚本的时候，在读取加密文件之前对文件进行解密（使用的解密密码提前在 Travis 上配置好了），这样就可以达到不将文件内容暴露，并且让 Travis 获取到真实内容的目的了，大概的时序图如下：</p><p><img src="http://githubimg.wxio.club/image/jpegTravisEncFileSequenceDiagram.jpg" alt="Travis文件加密" title="Travis文件加密"></p><h4 id="Travis-文件加密"><a href="#Travis-文件加密" class="headerlink" title="Travis 文件加密"></a>Travis 文件加密</h4><p>那么现在开始进行文件的加密（主要是私钥的加密），首先看看前提（这里我直接翻译官方的说明）。</p><ul><li>你的仓库已经在 Travis CI 上建立（在<a href="/2016/09/20/blog-with-github-travis-ci-and-coding-net-1/">前一篇</a>已经讲过，如果你照做的话）</li><li>已经安装 Travis CI Command Line Client，并且已经<strong>登陆</strong>（在<a href="/2016/09/20/blog-with-github-travis-ci-and-coding-net-1/">前一篇</a>已经讲过）</li></ul><p>其实很简单，把私钥<strong>拷贝</strong>（不要删除原来的）到博客<strong>根目录</strong>下（之后会删除），然后执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">travis encrypt-file id_rsa</span><br></pre></td></tr></table></figure><p>id_rsa 是私钥文件，执行后博客根目录下会生成 id_rsa.enc 文件，这是加密过后的文件，会上传到 GitHub 上，使用它需要先进行解密。把这个加密后的文件放到博客根目录的 .travis 文件夹下（没有的话创建）后面用，别忘了删除 id_rsa 文件。 </p><p>之后登录 Travis CI 中 repositry 的 Settings 界面：</p><p><img src="http://githubimg.wxio.club/blog/blog-with-github-travis-ci-and-coding-net/travis-ci-key.png" alt="Settings" title="Settings"></p><p>Travis CI 会给我们自动生成两个环境变量–两个 key，这两个 key 是对私钥加密文件进行解密的用的。</p><h3 id="提交配置"><a href="#提交配置" class="headerlink" title="提交配置"></a>提交配置</h3><p>完成以上后，可以将代码提交到 GitHub 上，这样 Travis CI 就会触发任务，如果在 Travis CI 的 Job Log 里最后的 log 是以下则说明执行成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Done. Your build exited with 0.</span><br></pre></td></tr></table></figure><p>但是这还没有部署到 Coding.net （或者 github.com ）上，这需要编写 deploy 相关脚本。</p><p>好了，第二篇就差不多了，在最后一篇将讲编写部署脚本。</p><p><em>未完待续，还有第三篇。</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;接着&lt;a href=&quot;/2016/09/20/blog-with-github-travis-ci-and-coding-net-1/&quot;&gt;第一篇&lt;/a&gt;讲。&lt;/p&gt;
&lt;p&gt;在确保注册 Travis CI 和已经安装了 &lt;strong&gt;Travis CI Command Li
      
    
    </summary>
    
    
      <category term="github" scheme="https://huangyijie.com/tags/github/"/>
    
      <category term="travis" scheme="https://huangyijie.com/tags/travis/"/>
    
      <category term="coding.net" scheme="https://huangyijie.com/tags/coding-net/"/>
    
  </entry>
  
  <entry>
    <title>寓食记</title>
    <link href="https://huangyijie.com/2016/10/01/yushiji/"/>
    <id>https://huangyijie.com/2016/10/01/yushiji/</id>
    <published>2016-10-01T15:58:51.000Z</published>
    <updated>2020-01-18T16:44:35.511Z</updated>
    
    <content type="html"><![CDATA[<p>以前在看美食公众号的时候，总觉得是小县城餐馆的风格，进去就是菜谱，选图也颇山寨，更可怕的是这种美食公众号的内容都是千篇一律，指不定多看几个公众号的内容就能找到相同的。也可能是因为大多数人对美食媒体的认识都局限在“<strong>菜谱</strong>”这一层面的缘故吧，想突破总觉得没有理由。</p><p>直到我朋友给我推荐了－－<strong>寓食记</strong>。</p><p><img src="http://githubimg.wxio.club/image/jpg/yushiji/qrcode_for_yushiji.jpg" alt="寓食记" title="寓食记"></p><p><strong>寓食记</strong>的内容很文艺，或者说是最近的内容偏文艺，它首先会突出“故事”，再进入菜品的制作步骤，最重要的是每个故事都能使你很快融入这道菜的意境。</p><p>发现一个有内容的公众号可能越来越难了，再加上最近微信公众号的刷量工具出问题，导致很多公众号的真实阅读量被曝光，有的公众号刷的量快到100%了，可想大部分阅读一片繁荣的景象这得多假。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前在看美食公众号的时候，总觉得是小县城餐馆的风格，进去就是菜谱，选图也颇山寨，更可怕的是这种美食公众号的内容都是千篇一律，指不定多看几个公众号的内容就能找到相同的。也可能是因为大多数人对美食媒体的认识都局限在“&lt;strong&gt;菜谱&lt;/strong&gt;”这一层面的缘故吧，想突
      
    
    </summary>
    
    
      <category term="生活" scheme="https://huangyijie.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>使用Github、Travis-CI和Coding.net自动部署博客［一］</title>
    <link href="https://huangyijie.com/2016/09/20/blog-with-github-travis-ci-and-coding-net-1/"/>
    <id>https://huangyijie.com/2016/09/20/blog-with-github-travis-ci-and-coding-net-1/</id>
    <published>2016-09-20T14:38:41.000Z</published>
    <updated>2020-01-18T16:44:35.511Z</updated>
    
    <content type="html"><![CDATA[<p>在从前，我在本地写一篇文章后要将它不熟到服务器并且提交源码，需要这么几个步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo clean &amp;&amp; hexo deploy // 我的博客是用hexo构建的，其他的静态博客构件工具还有jekyll等</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"xxxx"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin <span class="built_in">source</span> // 保存博客源码</span></span><br></pre></td></tr></table></figure><p>这里主要做了两个操作，而这两个操作又是 <strong>捆绑</strong> 的，什么意思呢？就是每次写一篇文章我 <strong>都要</strong> 在本地执行进行部署，<strong>并且</strong>提交源码，这是很费劲的。</p><p>我可不可以像代码开发一样，在本地写完代码，然后提交代码，就这么结束了？当然可以了！</p><p>下面开始一步一步的讲解，过程虽然有些繁琐，但是记住这种事情只要做一次，正可谓功在当代，利在千秋啊！</p><h2 id="持续集成（CI）"><a href="#持续集成（CI）" class="headerlink" title="持续集成（CI）"></a>持续集成（CI）</h2><p>来到新公司，接触到了<strong><a href="http://baike.baidu.com/view/5253255.htm" target="_blank" rel="noopener">持续集成（CI）</a></strong>的概念，提供 CI 的开源工具有 Jenkins，但是我总不能自己跑个机器来运行 Jenkins 对我的博客源码变化进行监控吧？那么，就想到了有没有开源、免费的、提供 CI 功能的在线工具服务呢？当然有，<a href="https://travis-ci.org/" target="_blank" rel="noopener"><strong>Travis CI</strong></a> 是目前比较火的开源持续集成构建工具，而且它对github的集成支持非常好。</p><h2 id="怎么自动部署"><a href="#怎么自动部署" class="headerlink" title="怎么自动部署"></a>怎么自动部署</h2><p>那么，具体是怎么个自动部署法？这是时序图：</p><p><img src="http://githubimg.wxio.club/blog-with-github-travis-ci-SequenceDiagram.jpg" alt="自动部署是时序图" title="自动部署时序图"></p><ol><li>创建文章；</li><li>将代码 push 到远程仓库，这里是 Github；</li><li>Github 调用 Travis 的 webhook，关于什么是 webhook，这里不具体说明了，大体上就是一个链接，Travis 在 Github 上配置以后，Github 每发生一些事件（就比如我这里的 push）就会掉用访问这个链接以<strong>起到通知 Travis 的作用</strong>；</li><li>Travis 从 github 获取代码；</li><li>Travis build 代码；</li><li>Travis 部署博客到 Coding.net。</li></ol><p>可以看到，在本地只需要执行两步操作，剩下的我完全不用管。</p><p>最右边的 <strong><a href="https://coding.net/" target="_blank" rel="noopener">Coding.net</a></strong> 是我用来部署博客的，它是类似  Github 的代码托管，并且也提供 pages 的服务，最关键的一点是它是<strong>中国本地</strong>的。最开始我部署在 Github 上，但是由于国内访问实在太慢而且不稳定，所以就选择了 <strong><a href="https://coding.net/" target="_blank" rel="noopener">Coding.net</a></strong>。</p><p>下一篇将会着重讲 Travis CI 的配置和使用，在这之前先得注册 Travis CI 和安装一个 Travis 官方提供的命令行工具 <strong>Travis CI Command Line Client</strong>，它可以快捷地使用一些功能，比如生成 Travis 的加密文件等。</p><h2 id="注册-Travis-CI"><a href="#注册-Travis-CI" class="headerlink" title="注册 Travis CI"></a>注册 Travis CI</h2><p>Travis CI 不需要单独注册，直接使用 GitHub 账号登录就可以了。</p><p>上官网会发现有 Sign in with GitHub（使用GitHUb登录）和 Sign Up（注册），其实这俩做的事情都一样，就是用 GitHub 账号登录。</p><p>登录后界面会显示你的 GitHub repository，默认全部全部没有勾选（“叉号”），选择你的博客的 repository（使之变成“对号”） 后完成第一步，如图：</p><p><img src="http://githubimg.wxio.club/blog/blog-with-github-travis-ci-and-coding-net/travis-sign-in.png" alt="注册Travis CI" title="注册Travis CI"></p><p>接下来是添加配置文件 .travis.yml 和 进行第一次 push 代码触发工作，这两部再下一篇再讲。</p><h2 id="安装-Travis-CI-Command-Line-Client"><a href="#安装-Travis-CI-Command-Line-Client" class="headerlink" title="安装 Travis CI Command Line Client"></a>安装 Travis CI Command Line Client</h2><p>以下的安装教程是我直接翻译的<a href="https://github.com/travis-ci/travis.rb#installation" target="_blank" rel="noopener">官方安装说明</a>。</p><p>请确保本地已经安装<strong><a href="http://www.ruby-lang.org/en/downloads/" target="_blank" rel="noopener">Ruby</a></strong>，并且版本不低于1.9.3，推荐2.0.0版。</p><p>可以通过执行以下命令验证 Ruby 的版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ruby -v</span><br><span class="line">ruby 2.0.0p195 (2013-05-14 revision 40734) [x86_64-darwin12.3.0]</span><br></pre></td></tr></table></figure><p>然后执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gem install travis -v 1.8.2 --no-rdoc --no-ri</span><br></pre></td></tr></table></figure><p>最后验证一下是否安装成功:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ travis version</span><br><span class="line">1.8.2</span><br></pre></td></tr></table></figure><p>如上，如果出现 1.8.2 这样的版本信息，则说明 Travis CI Command Line Client 安装成功。之后进行登录，执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ travis login</span><br></pre></td></tr></table></figure><p>按照提示依次输入用户名、密码，Two-factor码（如果你有设置的话），以下是登录成功的反馈：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ travis login</span><br><span class="line">We need your GitHub login to identify you.</span><br><span class="line">This information will not be sent to Travis CI, only to api.github.com.</span><br><span class="line">The password will not be displayed.</span><br><span class="line"></span><br><span class="line">Try running with --github-token or --auto if you don&apos;t want to enter your password anyway.</span><br><span class="line"></span><br><span class="line">Username: henryhuang</span><br><span class="line">Password for henryhuang: *************</span><br><span class="line">Two-factor authentication code for henryhuang: 403317</span><br><span class="line">Successfully logged in as henryhuang!</span><br></pre></td></tr></table></figure><p>使用 <strong>gem</strong> 需要安装 <strong>ruby 环境</strong>，作为一个开发人员，不要嫌麻烦。</p><p><em>未完待续，还有第二篇。</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在从前，我在本地写一篇文章后要将它不熟到服务器并且提交源码，需要这么几个步骤：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span
      
    
    </summary>
    
    
      <category term="github" scheme="https://huangyijie.com/tags/github/"/>
    
      <category term="travis" scheme="https://huangyijie.com/tags/travis/"/>
    
      <category term="coding.net" scheme="https://huangyijie.com/tags/coding-net/"/>
    
  </entry>
  
  <entry>
    <title>书单</title>
    <link href="https://huangyijie.com/2016/05/12/booklist/"/>
    <id>https://huangyijie.com/2016/05/12/booklist/</id>
    <published>2016-05-12T14:43:40.000Z</published>
    <updated>2020-01-18T16:44:35.511Z</updated>
    
    <content type="html"><![CDATA[<p>在阳台晾衣服的时候，看到了书柜上尘封已久的书籍，别有一番滋味在心头啊！</p><p>从开始工作到现在，多多少少买了一些书，有技术的也有非技术的，记得两年前京东经常有图书活动，买200减去100这样的，所以当时买了很多，后来就买的少了，更多的是看电子书，再加上买了个Kindle，几乎没有再进纸质书了。</p><p>突然有个想法想整理一下技术书籍，以后想搞个借书换书的功能，最初的想法是这样（现在还没进一步的去想），步骤如下：</p><ol><li>给我发电子邮件所要哪本书，并提供身份证明（这一步也是不得已），身份证明大致包括如下：<ol><li>github账号</li><li>提供手机号码</li><li>照片</li><li>邮寄地址</li></ol></li><li>克隆<a href="https://github.com/henryhuang/booklist" target="_blank" rel="noopener">Booklist</a>，在所要借阅的书籍后面备注借阅者身份信息，提交github的pull request</li><li>给我转账，包括邮费、押金（前期我觉得还是需要押金，后期可能就不需要了，至于押金多少还没定），当然快递到付就不需要邮费了</li><li>我寄书</li></ol><p>大致的过程就是这样，当然这里面是有漏洞的，比如这里面是先给我转账后我再寄书，这对借阅者是不保险的，唯一能靠的就是<strong>信任了</strong> ：）。其实开个淘宝店来卖“借阅”这种商品也是可以的，但是我觉得太麻烦了 = =。</p><p>Booklist的地址如下：</p><p><a href="https://github.com/henryhuang/booklist" target="_blank" rel="noopener">https://github.com/henryhuang/booklist</a></p><p>最后想说的是，如果这个事办成，这件事核心只有一个：<strong>分享</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在阳台晾衣服的时候，看到了书柜上尘封已久的书籍，别有一番滋味在心头啊！&lt;/p&gt;
&lt;p&gt;从开始工作到现在，多多少少买了一些书，有技术的也有非技术的，记得两年前京东经常有图书活动，买200减去100这样的，所以当时买了很多，后来就买的少了，更多的是看电子书，再加上买了个Kind
      
    
    </summary>
    
    
      <category term="杂事" scheme="https://huangyijie.com/tags/%E6%9D%82%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>WebJars使用示例</title>
    <link href="https://huangyijie.com/2016/04/07/webjars-usage-sample/"/>
    <id>https://huangyijie.com/2016/04/07/webjars-usage-sample/</id>
    <published>2016-04-07T02:16:40.000Z</published>
    <updated>2020-01-18T16:44:35.511Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>这里只介绍Servlet3如何使用WebJars（Classic风格），文章中示例源码地址在<a href="http://https://github.com/henryhuang/webjars-example" target="_blank" rel="noopener">https://github.com/henryhuang/webjars-example</a>。</p><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><h3 id="Servlet类"><a href="#Servlet类" class="headerlink" title="Servlet类"></a>Servlet类</h3><p>首先配置一个Servlet：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletSample</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">5041101055869552308L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doPost(req, resp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>(PrintWriter printWriter = resp.getWriter()) &#123;</span><br><span class="line">printHTML(printWriter, <span class="string">"&lt;script type='javascript' src='webjars/jquery/3.0.0-alpha1/jquery.js'&gt;&lt;/script&gt;"</span>, <span class="string">"OK"</span>);</span><br><span class="line">printWriter.flush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printHTML</span><span class="params">(PrintWriter printWriter, String headContent, String bodyContent)</span> </span>&#123;</span><br><span class="line">printWriter.print(<span class="string">"&lt;html&gt;"</span>);</span><br><span class="line">printWriter.print(<span class="string">"&lt;head&gt;"</span>);</span><br><span class="line">printWriter.print(headContent);</span><br><span class="line">printWriter.print(<span class="string">"&lt;/head&gt;"</span>);</span><br><span class="line">printWriter.print(<span class="string">"&lt;body&gt;"</span>);</span><br><span class="line">printWriter.print(bodyContent);</span><br><span class="line">printWriter.print(<span class="string">"&lt;/body&gt;"</span>);</span><br><span class="line">printWriter.print(<span class="string">"&lt;/html&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 <strong>cnhalo.ServletSample#doPost</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">printHTML(printWriter, <span class="string">"&lt;script type='javascript' src='webjars/jquery/3.0.0-alpha1/jquery.js'&gt;&lt;/script&gt;"</span>, <span class="string">"OK"</span>);</span><br></pre></td></tr></table></figure><p><strong>“webjars/jquery/3.0.0-alpha1/jquery.js”</strong> 是根据jquery的WebJars包里<strong>META-INF/resources</strong>下的路径写的：</p><p><img src="http://77fkdd.com1.z0.glb.clouddn.com/image%2Fpng%2Fwebjars-lib-tree.png" alt="文件结构"></p><h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><p>web.xml 里的内容为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>webjars<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cnhalo.ServletSample<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>webjars<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/webjars<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><h3 id="自己打包"><a href="#自己打包" class="headerlink" title="自己打包"></a>自己打包</h3><p>示例项目使用Gradle进行构建，需要配置Gradle的环境，然后依次执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> http://https://github.com/henryhuang/webjars-example</span><br><span class="line"><span class="built_in">cd</span> webjars-example</span><br><span class="line">gradle war // 生成war包</span><br></pre></td></tr></table></figure><p>gradle会打出war包，进入项目的 build/libs/ 下面，看到 <strong>webjars-1.0.war</strong> 即是，将war包放入tomcat下运行即可。</p><p><strong>注意，代码使用了jdk8。</strong></p><h3 id="使用发布包"><a href="#使用发布包" class="headerlink" title="使用发布包"></a>使用发布包</h3><p>如果不想使用gradle打包，可以使用我已经打好的包<a href="https://github.com/henryhuang/webjars-example/releases/download/1.0/webjars-1.0.war" target="_blank" rel="noopener">webjars-1.0.war</a>。</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>启动tomcat，访问 <strong><a href="http://localhost:8080/webjars-1.0/webjars" target="_blank" rel="noopener">http://localhost:8080/webjars-1.0/webjars</a></strong>，界面显示 <strong>OK</strong>，查看页面源码（使用FireFox，鼠标右键，查看页面源代码，其它浏览器类似）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'javascript'</span> <span class="attr">src</span>=<span class="string">'webjars/jquery/3.0.0-alpha1/jquery.js'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    OK</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击 <em>webjars/jquery/3.0.0-alpha1/jquery.js</em> ，可显示 jquery的源码信息，则使用成功！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;这里只介绍Servlet3如何使用WebJars（Classic风格），文章中示例源码地址在&lt;a href=&quot;http://https://
      
    
    </summary>
    
      <category term="helloworld" scheme="https://huangyijie.com/categories/helloworld/"/>
    
    
      <category term="java" scheme="https://huangyijie.com/tags/java/"/>
    
      <category term="css" scheme="https://huangyijie.com/tags/css/"/>
    
      <category term="javascript" scheme="https://huangyijie.com/tags/javascript/"/>
    
      <category term="webjars" scheme="https://huangyijie.com/tags/webjars/"/>
    
  </entry>
  
  <entry>
    <title>WebJars介绍</title>
    <link href="https://huangyijie.com/2016/04/04/webjars-introduction/"/>
    <id>https://huangyijie.com/2016/04/04/webjars-introduction/</id>
    <published>2016-04-04T14:26:26.000Z</published>
    <updated>2020-01-18T16:44:35.511Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是WebJars"><a href="#什么是WebJars" class="headerlink" title="什么是WebJars"></a>什么是WebJars</h2><p>什么是WebJars？WebJars是将客户端（浏览器）资源（JavaScript，Css等）打成jar包文件，以对资源进行统一依赖管理。WebJars的jar包部署在Maven中央仓库上。</p><h2 id="为什么使用WebJars"><a href="#为什么使用WebJars" class="headerlink" title="为什么使用WebJars"></a>为什么使用WebJars</h2><p>我们在开发Java web项目的时候会使用像Maven，Gradle等构建工具以实现对jar包版本依赖管理，以及项目的自动化管理，但是对于JavaScript，Css等前端资源包，我们只能采用拷贝到webapp下的方式，这样做就无法对这些资源进行依赖管理。那么WebJars就提供给我们这些前端资源的jar包形势，我们就可以进行依赖管理。</p><h2 id="三种风格的WebJars"><a href="#三种风格的WebJars" class="headerlink" title="三种风格的WebJars"></a>三种风格的WebJars</h2><p>官方提供三种风格的WebJars，NPM，Bower，和Classic。</p><h3 id="NPM-WebJars"><a href="#NPM-WebJars" class="headerlink" title="NPM WebJars"></a>NPM WebJars</h3><ul><li>根据镜像即时创建和部署</li><li>任何人都可以请求发布资源包</li><li>使用<a href="https://www.npmjs.com/" target="_blank" rel="noopener">NPM</a>的镜像资源，NPM是javascript（主要是nodejs，iojs）的包管理工具</li></ul><h3 id="Bower-WebJars"><a href="#Bower-WebJars" class="headerlink" title="Bower WebJars"></a>Bower WebJars</h3><ul><li>根据镜像即时创建和部署</li><li>任何人都可以请求发布资源包</li><li>使用<a href="http://www.bower.io/" target="_blank" rel="noopener">Bower</a>的镜像资源，Bower是前端资源的管理工具</li></ul><h3 id="Classic-WebJars"><a href="#Classic-WebJars" class="headerlink" title="Classic WebJars"></a>Classic WebJars</h3><ul><li>手工打包并且部署</li><li>只由WebJars官方团队发布</li><li>人工创建RequireJS配置文件（RequireJS是一个使浏览器使用javascript模块化的库）</li></ul><p>前两种主要是使用很成熟的前端资源管理工具的仓库资源来创建jar包并且部署，但是任何人都可以发布包，这就造成了有些包的内容不严谨，说不定给你弄点恶意代码你都不知道，而第三种是由官方团队进行发布。</p><p>前两种根据镜像即时发布，可以使资源版本维持在最新状态，而第三种是手工打包的，难免会有延迟。</p><h2 id="官方网站"><a href="#官方网站" class="headerlink" title="官方网站"></a>官方网站</h2><p><a href="http://www.webjars.org/" target="_blank" rel="noopener">http://www.webjars.org/</a></p><p>关于WebJars的使用，可看我这篇<a href="/2016/04/07/webjars-usage-sample/">WebJars使用示例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是WebJars&quot;&gt;&lt;a href=&quot;#什么是WebJars&quot; class=&quot;headerlink&quot; title=&quot;什么是WebJars&quot;&gt;&lt;/a&gt;什么是WebJars&lt;/h2&gt;&lt;p&gt;什么是WebJars？WebJars是将客户端（浏览器）资源（JavaScr
      
    
    </summary>
    
      <category term="introduction" scheme="https://huangyijie.com/categories/introduction/"/>
    
    
      <category term="java" scheme="https://huangyijie.com/tags/java/"/>
    
      <category term="css" scheme="https://huangyijie.com/tags/css/"/>
    
      <category term="javascript" scheme="https://huangyijie.com/tags/javascript/"/>
    
      <category term="webjars" scheme="https://huangyijie.com/tags/webjars/"/>
    
  </entry>
  
  <entry>
    <title>Maven打jar包内容出错</title>
    <link href="https://huangyijie.com/2016/03/29/maven-build-jar-no-class-file/"/>
    <id>https://huangyijie.com/2016/03/29/maven-build-jar-no-class-file/</id>
    <published>2016-03-29T15:24:13.000Z</published>
    <updated>2020-01-18T16:44:35.511Z</updated>
    
    <content type="html"><![CDATA[<p>今天在使用maven打包时，发现打的jar包有问题。</p><h2 id="第1种情况－无class文件"><a href="#第1种情况－无class文件" class="headerlink" title="第1种情况－无class文件"></a>第1种情况－无class文件</h2><p>打的jar包没有内容（准确地说是没有class）,猜想应该是maven打包的时候没有compile java源文件到class，从网上找原因，原来maven默认是compile <strong>src/main/java</strong> 下的java文件，而我们目录结构中的源码目录是 <strong>src/</strong>，需要在<strong>pom.xml</strong>里指定源码位置。</p><p>在pom.xml文件的 build &gt; resources 前加入 <sourcedirectory>${basedir}/src</sourcedirectory> ，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>$&#123;basedir&#125;/src<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打出的jar包内就有class了。</p><h2 id="第2种情况－无资源文件"><a href="#第2种情况－无资源文件" class="headerlink" title="第2种情况－无资源文件"></a>第2种情况－无资源文件</h2><p>启动系统后，界面报错，提示找不到 html 资源文件。</p><p>由于使用的是<a href="http://wicket.apache.org" target="_blank" rel="noopener">Wicket</a>，需要打入Component对应的html文件（这是Wicket的特点），界面提示找不到html文件，查找这个jar包的内容，发现没有html，再次回到 pom.xml 文件查看：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>$&#123;basedir&#125;/src<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上，resources &gt; resource &gt; directory 的内容是 src/main/java，改成 src 后再打的jar包就好了。</p><p>具体原因和第一个问题类似，这里的配置是将 resource （除了class等其他资源）打入jar包，而配置是只将 src/main/java 内的所有资源（除了java文件的文件）打入jar包，实际上我们所希望的是将 src/ 下的打入，改完后如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>$&#123;basedir&#125;/src<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>pom.xml的上级配置（默认配置）：<a href="https://maven.apache.org/guides/introduction/introduction-to-the-pom.html#Super_POM" target="_blank" rel="noopener">https://maven.apache.org/guides/introduction/introduction-to-the-pom.html#Super_POM</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在使用maven打包时，发现打的jar包有问题。&lt;/p&gt;
&lt;h2 id=&quot;第1种情况－无class文件&quot;&gt;&lt;a href=&quot;#第1种情况－无class文件&quot; class=&quot;headerlink&quot; title=&quot;第1种情况－无class文件&quot;&gt;&lt;/a&gt;第1种情况－无cla
      
    
    </summary>
    
      <category term="basic" scheme="https://huangyijie.com/categories/basic/"/>
    
    
      <category term="java" scheme="https://huangyijie.com/tags/java/"/>
    
      <category term="wicket" scheme="https://huangyijie.com/tags/wicket/"/>
    
      <category term="maven" scheme="https://huangyijie.com/tags/maven/"/>
    
      <category term="jar" scheme="https://huangyijie.com/tags/jar/"/>
    
  </entry>
  
</feed>
